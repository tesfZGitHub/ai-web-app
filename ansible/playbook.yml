---
- hosts: webai
  become: yes
  vars:
    app_user: "tesfaye"
    app_dir: "/opt/ai-app" 
    github_repo: "https://github.com/tesfZGitHub/ai-web-app.git"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - ufw
          - git
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose manually  
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Create application user
      user:
        name: "{{ app_user }}"
        state: present
        shell: /bin/bash

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Clone app repository
      git:
        repo: "{{ github_repo }}"
        dest: "{{ app_dir }}"
        version: main
      become_user: "{{ app_user }}"

    - name: Create environment file
      copy:
        dest: "{{ app_dir }}/.env"
        content: |
          MODEL_NAME=distilbert-base-uncased-finetuned-sst-2-english
          BACKEND_URL=http://backend:8000
          PORT=8000
          FLASK_ENV=production
          TRANSFORMERS_CACHE=/app/cache
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'

    - name: Ensure systemd unit file is present
      copy:
        dest: /etc/systemd/system/ai-web-app.service
        content: |
          [Unit]
          Description=AI Web Application
          After=docker.service
          Requires=docker.service

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory={{ app_dir }}
          ExecStart=/usr/local/bin/docker-compose up -d  
          ExecStop=/usr/local/bin/docker-compose down    
          ExecReload=/usr/local/bin/docker-compose restart  
          TimeoutStartSec=300
          User={{ app_user }}
          Group={{ app_user }}

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Start app service
      systemd:
        name: ai-app.service
        state: started
        enabled: yes

    - name: Configure firewall
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - 22    # SSH
        - 80    # HTTP
        - 443   # HTTPS
        - 8000  # Backend API

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

    - name: Wait for services to be ready
      wait_for:
        port: 8000
        host: 127.0.0.1
        timeout: 60

    - name: Verify deployment
      command: curl -f http://localhost:8000/health
      register: health_check
      failed_when: health_check.rc != 0
