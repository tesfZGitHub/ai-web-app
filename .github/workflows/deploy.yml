name: Deploy AI App to VM

on:
  push:
    branches: [ main ]

env:
  VM_HOST: 192.168.42.128  # ← Updated to your actual VM IP
  VM_USER: tesfaye         # ← Updated to your actual user

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0  # ← Better SSH handling
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Create environment file
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.VM_USER }}@${{ env.VM_HOST }} "
          mkdir -p /opt/ai-app
          cat > /opt/ai-app/.env << 'EOT'
MODEL_NAME=distilbert-base-uncased-finetuned-sst-2-english
BACKEND_URL=http://backend:8000
PORT=8000
FLASK_ENV=production
TRANSFORMERS_CACHE=/app/cache
EOT
        "
    
    - name: Copy application files
      run: |
        scp -o StrictHostKeyChecking=no -r ./* ${{ env.VM_USER }}@${{ env.VM_HOST }}:/opt/ai-app/
    
    - name: Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.VM_USER }}@${{ env.VM_HOST }} "
          set -e
          echo '=== Starting deployment ==='
          
          cd /opt/ai-app
          
          echo '=== Stopping existing containers ==='
          sudo /usr/local/bin/docker-compose down || true
          
          echo '=== Building new containers ==='
          sudo /usr/local/bin/docker-compose build --no-cache
          
          echo '=== Starting services ==='
          sudo /usr/local/bin/docker-compose up -d
          
          echo '=== Waiting for services to be healthy ==='
          sleep 30
          
          echo '=== Checking container status ==='
          sudo /usr/local/bin/docker-compose ps
          
          echo '=== Running health checks ==='
          curl -f http://localhost:8000/health && echo '✅ Backend healthy' || echo '❌ Backend health check failed'
          curl -f http://localhost:80/health && echo '✅ Frontend healthy' || echo '❌ Frontend health check failed'
          
          echo '=== Ensuring systemd service ==='
          sudo systemctl daemon-reload
          sudo systemctl enable ai-app.service || true
          sudo systemctl start ai-app.service || echo 'Service already running'
          
          echo '🎉 Deployment completed successfully!'
        "
